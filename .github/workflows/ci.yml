name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U testuser" --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DATABASE_URL: 'postgresql://testuser:testpass@localhost:5432/testdb'
      PGHOST: localhost
      PGPORT: '5432'
      PGUSER: testuser
      PGPASSWORD: testpass
      PGDATABASE: testdb
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose
      - name: Check Docker Compose
        run: |
          if ! command -v docker-compose >/dev/null; then
            echo 'docker-compose not found' >&2
            exit 1
          fi
      - name: Prisma binary targets
        run: echo "PRISMA_CLI_BINARY_TARGETS=native" >> $GITHUB_ENV
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U testuser && break
            echo "Waiting for Postgres..."
            sleep 2
          done
      - name: Wait for Postgres with psql
        run: |
          until PGPASSWORD=testpass psql -h localhost -U testuser -c '\q'; do
            echo "Waiting for Postgres to accept connections..."
            sleep 2
          done
      - run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Run Tests
        run: npm test
      - run: npx prisma generate
      - name: Security audit
        run: npm audit --production --json | node .github/scripts/npm-audit-gate.js
      - run: npx markdown-lint docs/**/*.md
      - run: npx prisma migrate deploy
      - name: Run tests with coverage
        run: npm run test:coverage -- --coverageThreshold='{"global":{"branches":80,"functions":85,"lines":85,"statements":85}}'
      - run: bash .github/scripts/coverage-gate.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: true
      - name: Publish Storybook to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      - uses: github/codeql-action/analyze@v3
      - name: TruffleHog scan
        if: github.event_name == 'push'
        uses: trufflesecurity/trufflehog@v3.89.1
        with:
          path: '.'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.FLY_API_TOKEN != ''
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy --remote-only"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
